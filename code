#------------------------------------------------------------------------------
# VGG16 ON CIFAR_10
#------------------------------------------------------------------------------
import numpy as np
import pandas as pd
from tensorflow.keras.applications.vgg16 import VGG16
import tensorflow.keras as k
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout ,BatchNormalization
from keras.utils.np_utils import to_categorical
from tensorflow.keras import optimizers
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import accuracy_score
from matplotlib import pyplot as plt
import seaborn as sns
#打印损失随迭代轮次变化的函数
def plot_with_dots(ax, np_array):
    ax.scatter(list(range(1, len(np_array) + 1)), np_array, s=50)
    ax.plot(list(range(1, len(np_array) + 1)), np_array)

#加载训练好权重的VGG模型
vgg16_model = VGG16(weights='imagenet',
                    include_top=False, 
                    classes=10,
                    input_shape=(32,32,3)
                   )
model = Sequential()

#在每个卷积层后加入批规范化层，以及加入正则化惩罚项
i=0
array = {2,3,5,6,8,9,10,12,13,14,16,17,18}
for layer in vgg16_model.layers:
    if i in array:
        model.add(BatchNormalization())
#        layer.kernel_regularizer=regularizers.l2(weight_decay)
    i+=1 
    model.add(layer)


#模型的全连接层
from tensorflow.keras.layers import Dense, Flatten, Dropout
model.add(Flatten())
model.add(Dense(512, activation='relu', name='hidden1'))
#model.add(Dropout(0.4))
#model.add(Dense(512, activation='relu', name='hidden2'))
model.add(Dropout(0.4))
model.add(Dense(10, activation='softmax', name='predictions'))

model.summary()


#加载数据集
(X_train, y_train), (X_test, y_test) = k.datasets.cifar10.load_data()
#one-hot处理
y_train_ohe = to_categorical(y_train, num_classes = 10)
y_test_ohe = to_categorical(y_test, num_classes = 10)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train  /= 255
X_test /= 255

#梯度下降选取
sgd = optimizers.SGD(lr=0.005, momentum=0.9)

model.compile(loss='categorical_crossentropy',optimizer= sgd,metrics=['accuracy'])

#早期停止这个参数很大影响准确率
es = EarlyStopping(patience=20, monitor='val_accuracy', mode='max')

#模型保存
mc = ModelCheckpoint('./weights.h5', monitor='val_accuracy', 
                     save_best_only=True, mode='max')


EPOCHS = 100
BS = 32

#图像增强
aug = ImageDataGenerator(rotation_range=20, zoom_range=0.15, 
                         width_shift_range=0.2, height_shift_range=0.2, shear_range=0.15,
                        horizontal_flip=True, fill_mode="nearest")
 
# 训练模型
history_0 = model.fit_generator(aug.flow(X_train,y_train_ohe, batch_size=BS),
                                validation_data=(X_test,y_test_ohe), 
                              steps_per_epoch=len(X_train) // BS,
                                epochs=EPOCHS,callbacks=[es,mc])

#加载训练模型
model.load_weights('./weights.h5')

#打印损失随迭代轮次的变化
plot_with_dots(plt, history_0.history['loss'])
plot_with_dots(plt, history_0.history['val_loss'])

#预测测试集
preds = model.predict(X_test)#on prédit le Test
pred=pd.DataFrame(preds)
result = pred.to_csv("result.csv")
score_test = accuracy_score( y_test, np.argmax(preds, axis=1) )
print (' LE SCORE DE TEST : ', score_test)

#输出准确率
train_loss, train_score = model.evaluate(X_train, y_train_ohe)
test_loss, test_score = model.evaluate(X_test, y_test_ohe)
print("Train Loss:", train_loss)
print("Test Loss:", test_loss)
print("Train Score:", train_score)
print("Test Score:", test_score)
